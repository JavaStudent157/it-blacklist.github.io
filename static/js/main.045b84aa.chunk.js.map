{"version":3,"sources":["routes/index.ts","App.tsx","index.tsx","store/index.ts","services/request.ts","services/api.ts"],"names":["routes","path","key","component","lazy","App","useReducer","stateReducer","initState","state","dispatch","useEffect","userInfo","localStorage","getItem","payload","JSON","parse","openid","createUUID","type","systemGetApi","then","res","notice","className","content","gapX","gapY","Provider","value","map","item","element","fallback","ReactDOM","render","StrictMode","document","getElementById","cityList","label","children","noticeBar","action","console","log","setItem","stringify","GlobalState","createContext","request","axios","create","baseURL","process","timeout","validateStatus","status","interceptors","use","config","response","data","getListApi","a","method","url","updateListApi","listCountApi","getDiscussApi","updateDiscussApi","updateFeedbackApi"],"mappings":"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","file":"static/js/main.045b84aa.chunk.js","sourcesContent":["import { lazy } from 'react'\n\nconst Home = lazy(() => import('../pages/home'))\nconst Content = lazy(() => import('../pages/content'))\nconst Statement = lazy(() => import('../pages/statement'))\nconst Create = lazy(() => import('../pages/create'))\nconst Feedback = lazy(() => import('../pages/feedback'))\n\ninterface IRoutes {\n  path: string\n  key: string\n  component: any\n}\n\nconst routes: IRoutes[] = [\n  { path: '/', key: 'home', component: Home },\n  { path: '/content', key: 'content', component: Content},\n  { path: '/statement', key: 'statement', component: Statement },\n  { path: '/create', key: 'create', component: Create },\n  { path: '/feedback', key: 'feedback', component: Feedback },\n]\n\nexport default routes\n","import React, {\n  useEffect,\n  useReducer,\n  Suspense,\n} from 'react'\nimport { HashRouter, Route, Routes } from 'react-router-dom'\nimport { WaterMark } from 'antd-mobile'\nimport { v4 as createUUID } from 'uuid'\nimport { AliveScope } from 'react-activation'\n\nimport { systemGetApi } from './services/api'\nimport './app.less'\nimport routes from './routes'\nimport {GlobalState,stateReducer,initState} from './store'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(stateReducer, initState)\n  useEffect(() => {\n    const userInfo = localStorage.getItem('$it-blacklist')\n    const payload = userInfo ? JSON.parse(userInfo) : { openid: createUUID() }\n    dispatch({ type: 'userInfo/update', payload })\n    systemGetApi().then((res: any) => {\n      dispatch({ type: 'noticeBar/update', payload: res[0].notice })\n    })\n  }, [])\n  return (\n    <div className=\"app\">\n      <WaterMark content=\"IT BLACKLIST\" gapX={96} gapY={96}/>\n      <GlobalState.Provider value={{ state, dispatch }}>\n        <HashRouter>\n          <AliveScope>\n            <Routes>\n              {routes.map(item => <Route path={item.path} element={<Suspense fallback={<>...</>}>{<item.component/>}</Suspense>} key={item.key}/>)}\n            </Routes>\n          </AliveScope>\n        </HashRouter>\n      </GlobalState.Provider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { createContext } from 'react'\n\nexport const initState = {\n  userInfo: null,\n  cityList: [\n    {\n      value: '河北省',\n      label: '河北省',\n      children: [\n        { value: '石家庄', label: '石家庄市' },\n      ],\n    },\n    {\n      value: '北京市',\n      label: '北京市',\n      children: [\n        { value: '北京', label: '市辖区' },\n      ],\n    },\n  ],\n  noticeBar: null,\n}\nexport const stateReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'userInfo/update':\n      console.log(action, state)\n      localStorage.setItem('$it-blacklist', JSON.stringify(action.payload))\n      return {\n        ...state,\n        userInfo: action.payload,\n      }\n    case 'noticeBar/update':\n      console.log(action, state)\n      return {\n        ...state,\n        noticeBar: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\n\nexport const GlobalState = createContext(\n  { state: initState, dispatch: stateReducer })","import axios from 'axios'\n\nconst request = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  timeout: 20000,\n  validateStatus: function (status) {\n    return status >= 200 && status < 300\n  },\n})\n\nrequest.interceptors.request.use((config) => {\n  return config\n})\n\nrequest.interceptors.response.use((response) => {\n  const res = response.data\n  return res.data ?? res\n})\n\nexport default request","import request from './request'\n\nexport async function getConfigApi () {\n  return request({\n    method: 'post',\n    url: 'system/get',\n  })\n}\n\ninterface IListParams {\n  _id?: string\n  current?: number\n  pageSize?: number\n  city?: string\n  company?: string\n  rate?: any\n}\n\nexport interface IList {\n  _id: string\n  company: string\n  content: string\n  city: string\n}\n\nexport async function getListApi (data: IListParams) {\n  return request({\n    method: 'post',\n    url: 'list/get',\n    data,\n  })\n}\n\nexport async function updateListApi (data: IListParams) {\n  return request({\n    method: 'post',\n    url: 'list/update',\n    data,\n  })\n}\n\nexport async function listCountApi () {\n  return request({\n    method: 'post',\n    url: 'list/count',\n  })\n}\n\nexport async function getDiscussApi (data: IListParams) {\n  return request({\n    method: 'post',\n    url: 'discuss/get',\n    data,\n  })\n}\nexport async function updateDiscussApi (data: IListParams) {\n  return request({\n    method: 'post',\n    url: 'discuss/update',\n    data,\n  })\n}\n\n\nexport async function updateFeedbackApi (data: IListParams) {\n  return request({\n    method: 'post',\n    url: 'feedback/update',\n    data,\n  })\n}\n\nexport async function systemGetApi () {\n  return request({\n    method: 'post',\n    url: 'system/get',\n  })\n}"],"sourceRoot":""}